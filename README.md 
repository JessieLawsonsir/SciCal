# 📊 Scientific Calculator API (FastAPI)

A secure, modular, full-featured API built using **FastAPI**. This project performs advanced mathematical operations, handles authentication, logs operations to a **MySQL** database, streams audio files, and supports asynchronous background tasks — all in one API.

---

## 📁 Project Folder Structure

```
scientificCal/
├── main.py                # Main FastAPI application
├── requirements.txt       # List of dependencies
├── music/                 # Folder with MP3 files
│   ├── track1.mp3
│   ├── track2.mp3
│   ├── track3.mp3
│   └── track4.mp3
└── .gitignore             # Git exclusion rules
```

---

## 🧠 Core Technologies Used

| Tool            | Purpose                            |
| --------------- | ---------------------------------- |
| FastAPI         | Web framework for building APIs    |
| Uvicorn         | ASGI server to run FastAPI         |
| Pydantic        | Data validation and serialization  |
| Python-Jose     | JWT-based authentication           |
| Passlib         | Password hashing                   |
| SQLAlchemy      | ORM for connecting to MySQL        |
| PyMySQL         | Python MySQL connector             |
| Loguru          | Elegant logging system             |
| MySQL Workbench | GUI for MySQL database             |
| Seq (Optional)  | Dashboard for live structured logs |

---

## 🚀 Features

### ✅ Scientific Operations

* `GET /sqrt?x=9` → Returns √9
* `GET /cbrt?x=27` → Returns ³√27
* `GET /log?x=100` → Returns log₁₀(100)
* `GET /sin?x=1.57` → Returns sin(x)
* `GET /tan?x=1` → Returns tan(x)
* `GET /integrate?a=0&b=5` → Returns ∫x dx from a to b = (b² - a²)/2

### 🔐 Authentication with JWT

* `POST /token` to get token
* Secure all routes with `Depends(get_current_user)`

### 💾 Logs Stored in MySQL

* Automatically logs each operation to the `logs` table
* Uses SQLAlchemy ORM and `log_operation()` function

### 🎧 Music Streaming

* Endpoint: `/music?track=track1`
* Dynamically streams `.mp3` files inside `music/` folder

### ⚡ Async Background Task

* `GET /async-task` to simulate a background job

---

## 🔐 Authentication Flow

1. Call `POST /token` with:

   * `username`: `testuser`
   * `password`: `testpass`
2. Copy the JWT token from the response
3. Click **Authorize 🔐** in Swagger UI or use:

   ```
   Authorization: Bearer <your_token>
   ```

All sensitive routes require a valid JWT.

---

## 📊 Sample Log in MySQL

| id | operation   | result | timestamp           |
| -- | ----------- | ------ | ------------------- |
| 1  | SQRT        | 3.0    | 2025-06-29 12:34:55 |
| 2  | INTEGRATION | 12.5   | 2025-06-29 12:35:40 |

Query:

```sql
USE scicalc;
SELECT * FROM logs;
```

---

## 📦 Setup Instructions

### 1. Create Virtual Environment

```bash
python -m venv .venv
source .venv/bin/activate
```

### 2. Install Dependencies

```bash
pip install -r requirements.txt
```

### 3. Run the App

```bash
uvicorn main:app --reload
```

Open in browser: [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)

---

## 🎼 Music Streaming Guide

1. Place `.mp3` files inside `music/` folder
2. Rename them as `track1.mp3`, `track2.mp3`, etc.
3. Access:

```http
GET /music?track=track1
GET /music?track=track2
```

---

## ✅ requirements.txt (example)

```txt
fastapi==0.115.14
uvicorn==0.35.0
httpx==0.28.1
sqlalchemy==2.0.41
pymysql==1.1.1
python-multipart==0.0.20
loguru==0.7.3
python-jose==3.5.0
passlib==1.7.4
bcrypt==4.0.1
```

---

## 📄 .gitignore Sample

```txt
.venv/
__pycache__/
.idea/
music/*.mp3
```

---

## 🛡️ Security Note

> This app uses hardcoded credentials (`testuser:testpass`) for demonstration purposes only. For production:

* Move users to a secure database
* Use environment variables for secrets
* Always use HTTPS

---

## 📜 License

```
MIT License

Copyright (c) 2025 Palle Jessie Lawson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```
